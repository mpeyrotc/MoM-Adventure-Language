class Character is_a Component {
    field<Int[30]> arrA;
    field<Int[5]> arrS;

    Character() {

    };

    Int partition(Int lo, Int hi){
        Int pivot = arrS[hi];
        Int i = (lo - 1);
        Int j = lo;
        Int temp = 0;
        while(j < hi){
            if(arrS[j] <= pivot){
                i = i + 1;
                temp = arrS[i];
                arrS[i] = arrS[j];
                arrS[j] = temp;
            };
            j = j + 1;
        };
        temp = arrS[i + 1];
        arrS[i + 1] = arrS[hi];
        arrS[hi] = temp;
        return i + 1;
    };

    Nothing sortArrS(Int lo, Int hi){
        if(lo < hi){
            Int pi = partition(lo, hi);
            sortArrS(lo, pi - 1);
            sortArrS(pi + 1, hi);
        };
    };

    Nothing fun1(){
        arrS[0] = 34;
        arrS[1] = 0;
        arrS[2] = 10;
        arrS[3] = 4;
        arrS[4] = 12;

        Int i = 0;
        WriteLine("Unsorted array:");
        while(i < 5){
            Write(arrS[i]);
            Write(" ");
            i = i + 1;
        };
        WriteLine(" ");
        sortArrS(0, 4);
        WriteLine("Sorted array: ");
        i = 0;
        while(i < 5){
            Write(arrS[i]);
            Write(" ");
            i = i + 1;
        };
        WriteLine(" ");
    };

    Boolean findArrA(Int x){
        Int i = 0;
        while(i < 30){
            if(arrA[i] == x){
                return TRUE;
            };
            i = i + 1;
        };

        return FALSE;
    };

    Nothing main(){
        fun1();
        Int i = 0;
        Int j = 0;
        Int n = 3;
        Int contador = 1;
        while(i < 30){
            arrA[i] = contador;
            i = i + 1;
            contador = contador + 1;
        };

        Int x = 6;
        if(findArrA(x)){
            Write(x);
            WriteLine(" found on array");
        }
        else{
            Write(x);
            WriteLine(" not found on array");
        };

        x = 200;
        if(findArrA(x)){
            Write(x);
            WriteLine(" found on array");
        }
        else{
            Write(x);
            WriteLine(" not found on array");
        };


        Int[3][3] arrB;
        Int[3][3] arrC;
        Int[3][3] ans;
        contador = 1;
        i = 0;
        while(i < n){
            j = 0;
            while(j < n){
                arrB[i][j] = contador;
                Write(arrB[i][j]);
                Write(" ");
                j = j + 1;
                contador = contador + 1;
            };
            WriteLine(" ");
            i = i + 1;
        };

        WriteLine(" * ");
        contador = 1;
        i = 0;
        while(i < n){
            j = 0;
            while(j < n){
                arrC[i][j] = contador;
                ans[i][j] = 0;
                Write(arrC[i][j]);
                Write(" ");
                j = j + 1;
                contador = contador + 1;
            };
            WriteLine(" ");
            i = i + 1;
        };

        WriteLine(" = ");
        i = 0; j = 0;
        Int k = 0;
        while(i < n){
            j = 0;
            while(j < n){
                k = 0;
                while(k < n){
                    ans[i][j] = ans[i][j] + arrB[i][k] * arrC[k][j];
                    k = k + 1;
                };
                j = j + 1;
            };
            i = i + 1;
        };

        i = 0;
        while(i < n){
            j = 0;
            while(j < n){
                Write(ans[i][j]);
                Write(" ");
                j = j + 1;
            };
            WriteLine(" ");
            i = i + 1;
        };
    };
};


