class Creature is_a Component {
    field<Int> lifeMax;
    field<Int> currentLife;
    field<Int> horror;
    field<Text[3]> abilities;
    field<Int> observation;

    Creature() {
    };

    Nothing move(){
        WriteLine("Moving");
    };

    Nothing attack(){
        WriteLine("Attacking");
    };

    Nothing evade(){
        WriteLine("Evading");
    };

    Nothing takeDamage(Int damage){
        currentLife = currentLife - damage;
        if(currentLife <= 0){
            WriteLine("You are dead");
        };
    };
};

class Message is_a Component {
    field<Text> title;
    field<Text> message;
    field<Text[5]> options;

    Message() {
    };

    Nothing showMessage(){
        WriteLine(message);
    };

    Int askQuestion(){
        return 1;
    };
};

class Token is_a Component {
    field<Text> description;

    Token() {
    };
};

class Face is_a Component {
    Face() {
    };

    Nothing showContent(){
        WriteLine("Showing Content");
    };
};

class Card is_a Component {
    field<Face> front;
    field<Face> back;

    Card() {
    };

    Nothing showFront(){
        WriteLine("Showing front");
    };

    Nothing showBack(){
        WriteLine("Showing back");
    };

    Nothing display(){
        WriteLine("Displaying");
    };

    Nothing setFrontFace(Face newFront){
        front = newFront;
    };

    Nothing setBackFace(Face newBack){
        back = newBack;
    };

};

class Player is_a Component {
    field<Int> mentalHealthMax;
    field<Int> physicalHealthMax;
    field<Int> currentMentalHealth;
    field<Int> currentPhysicalHealth;
    field<Card[5]> commonItems;
    field<Token[5]> tokens;

    Player() {
    };

    Nothing spendToken(Int count){
        Write("Spending ");
        Write(count);
        WriteLine(" tokens");
    };

    Nothing addToken(Token newToken){
        WriteLine("Adding Token");
    };

    Nothing discardCommonItem(Int index){
        WriteLine("Discarding common item");
    };

    Nothing dropCommonItem(Int index){
        WriteLine("Dropping common item");
    };

    Nothing increaseHealth(Int amount){
        currentPhysicalHealth = currentPhysicalHealth + amount;
        if(currentPhysicalHealth > physicalHealthMax){
            currentPhysicalHealth = physicalHealthMax;
        };
    };

    Nothing decreaseHealth(Int amount){
        currentPhysicalHealth = currentPhysicalHealth - amount;
        if(currentPhysicalHealth < 0){
            WriteLine("You died");
        };
    };

    Nothing increaseSanity(Int amount){
        currentMentalHealth = currentMentalHealth + amount;
        if(currentMentalHealth > mentalHealthMax){
            currentMentalHealth = mentalHealthMax;
        };
    };

    Nothing decreaseSanity(Int amount){
        currentMentalHealth = currentMentalHealth - amount;
        if(currentMentalHealth < 0){
            WriteLine("You died");
        };
    };

};

specification Player2 {
    Int a();
};

class Face2 is_a Component {
    field<Card> card;

    Face2() {
        card = new Card();
    };

    Nothing print() {
        WriteLine("Hey");
    };
};

class Character is_a Component of_type Player2 {
    field<Card> card;
    field<Int> ints;
    field<Int> physicalLife;
    field<Int[30]> arrNums;
    field<Int> numberOfItems;


    Character() {
    };

    Int a(){
        WriteLine("Implementing specifications method");
    };

    Int setCommonCard(Card card) {

        if(TRUE || FALSE) {
            physicalLife = 100;
        };

        return 3;
    };

    Boolean addCommonCard(Real cards, Int ints) {
        if(numberOfItems <  -1) {
            physicalLife = physicalLife;
        } else {
            if(numberOfItems <  -1) {
                physicalLife = physicalLife;
            } else {

            };
        };
    };

    Nothing doAction(Face2 x) {
        x.print();
        WriteLine("Doing an action");
    };

    Text name() {
        while(TRUE && FALSE) {
        };

        return "Father Mateo" + "!!!";
    };

    Nothing main() {
        Face2 f = new Face2();
        Face2 object = new Face2();
        a();
        f.print();
        doAction(object);
    };
};