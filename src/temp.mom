class Creature is_a Component {
    field<Int> lifeMax;
    field<Int> currentLife;
    field<Int> horror;
    field<Text[3]> abilities;
    field<Int> observation;

    Creature() {
    };

    Nothing move(){
        WriteLine("Moving");
    };

    Nothing attack(){
        WriteLine("Attacking");
    };

    Nothing evade(){
        WriteLine("Evading");
    };

    Nothing takeDamage(Int damage){
        currentLife = currentLife - damage;
        if(currentLife <= 0){
            WriteLine("You are dead");
        };
    };
};

class Message is_a Component {
    field<Text> title;
    field<Text> message;
    field<Text[5]> options;

    Message() {
    };

    Nothing showMessage(){
        WriteLine(message);
    };

    Int askQuestion(){
        return 1;
    };
};

class Token is_a Component {
    field<Text> description;

    Token() {
    };
};

class Face is_a Component {
    Face() {
    };

    Nothing showContent(){
        WriteLine("Showing Content");
    };
};

class Card is_a Component {
    field<Face> front;
    field<Face> back;

    Card() {
    };

    Nothing showFront(){
        WriteLine("Showing front");
    };

    Nothing showBack(){
        WriteLine("Showing back");
    };

    Nothing display(){
        WriteLine("Displaying");
    };

    Nothing setFrontFace(Face newFront){
        front = newFront;
    };

    Nothing setBackFace(Face newBack){
        back = newBack;
    };

};

class Player is_a Component {
    field<Int> mentalHealthMax;
    field<Int> physicalHealthMax;
    field<Int> currentMentalHealth;
    field<Int> currentPhysicalHealth;
    field<Card[5]> commonItems;
    field<Token[5]> tokens;

    Player() {
    };

    Nothing spendToken(Int count){
        Write("Spending ");
        Write(count);
        WriteLine(" tokens");
    };

    Nothing addToken(Token newToken){
        WriteLine("Adding Token");
    };

    Nothing discardCommonItem(Int index){
        WriteLine("Discarding common item");
    };

    Nothing dropCommonItem(Int index){
        WriteLine("Dropping common item");
    };

    Nothing increaseHealth(Int amount){
        currentPhysicalHealth = currentPhysicalHealth + amount;
        if(currentPhysicalHealth > physicalHealthMax){
            currentPhysicalHealth = physicalHealthMax;
        };
    };

    Nothing decreaseHealth(Int amount){
        currentPhysicalHealth = currentPhysicalHealth - amount;
        if(currentPhysicalHealth < 0){
            WriteLine("You died");
        };
    };

    Nothing increaseSanity(Int amount){
        currentMentalHealth = currentMentalHealth + amount;
        if(currentMentalHealth > mentalHealthMax){
            currentMentalHealth = mentalHealthMax;
        };
    };

    Nothing decreaseSanity(Int amount){
        currentMentalHealth = currentMentalHealth - amount;
        if(currentMentalHealth < 0){
            WriteLine("You died");
        };
    };

};

class Math is_a Component {

    Math() {

    };

    Nothing main(){
        Int i = 0;
        Int j = 0;
        Int n = 3;
        Int counter = 1;
        Int[3][3] arrB;
        Int[3][3] arrC;
        Int[3][3] ans;

        while(i < n){
            j = 0;
            while(j < n){
                arrB[i][j] = counter;
                Write(arrB[i][j]);
                Write(" ");
                j = j + 1;
                counter = counter + 1;
            };
            WriteLine(" ");
            i = i + 1;
        };

        WriteLine(" * ");
        counter = 1;
        i = 0;
        while(i < n){
            j = 0;
            while(j < n){
                arrC[i][j] = counter;
                ans[i][j] = 0;
                Write(arrC[i][j]);
                Write(" ");
                j = j + 1;
                counter = counter + 1;
            };
            WriteLine(" ");
            i = i + 1;
        };

        WriteLine(" = ");
        i = 0; j = 0;
        Int k = 0;
        while(i < n){
            j = 0;
            while(j < n){
                k = 0;
                while(k < n){
                    ans[i][j] = ans[i][j] + arrB[i][k] * arrC[k][j];
                    k = k + 1;
                };
                j = j + 1;
            };
            i = i + 1;
        };

        i = 0;
        while(i < n){
            j = 0;
            while(j < n){
                Write(ans[i][j]);
                Write(" ");
                j = j + 1;
            };
            WriteLine(" ");
            i = i + 1;
        };
    };
};


