class Creature is_a Component {
    field<Int> lifeMax;
    field<Int> currentLife;
    field<Int> horror;
    field<Text[3]> abilities;
    field<Int> observation;

    Creature() {
    };

    Nothing move(){
        WriteLine("Moving");
    };

    Nothing attack(){
        WriteLine("Attacking");
    };

    Nothing evade(){
        WriteLine("Evading");
    };

    Nothing takeDamage(Int damage){
        currentLife = currentLife - damage;
        if(currentLife <= 0){
            WriteLine("You are dead");
        };
    };
};

class Message is_a Component {
    field<Text> title;
    field<Text> message;
    field<Text[5]> options;

    Message() {
    };

    Nothing showMessage(){
        WriteLine(message);
    };

    Int askQuestion(){
        return 1;
    };
};

class Token is_a Component {
    field<Text> description;

    Token() {
    };
};

class Face is_a Component {
    Face() {
    };

    Nothing showContent(){
        WriteLine("Showing Content");
    };
};

class Card is_a Component {
    field<Face> front;
    field<Face> back;

    Card() {
    };

    Nothing showFront(){
        WriteLine("Showing front");
    };

    Nothing showBack(){
        WriteLine("Showing back");
    };

    Nothing display(){
        WriteLine("Displaying");
    };

    Nothing setFrontFace(Face newFront){
        front = newFront;
    };

    Nothing setBackFace(Face newBack){
        back = newBack;
    };

};

class Player is_a Component {
    field<Int> mentalHealthMax;
    field<Int> physicalHealthMax;
    field<Int> currentMentalHealth;
    field<Int> currentPhysicalHealth;
    field<Card[5]> commonItems;
    field<Token[5]> tokens;

    Player() {
    };

    Nothing spendToken(Int count){
        Write("Spending ");
        Write(count);
        WriteLine(" tokens");
    };

    Nothing addToken(Token newToken){
        WriteLine("Adding Token");
    };

    Nothing discardCommonItem(Int index){
        WriteLine("Discarding common item");
    };

    Nothing dropCommonItem(Int index){
        WriteLine("Dropping common item");
    };

    Nothing increaseHealth(Int amount){
        currentPhysicalHealth = currentPhysicalHealth + amount;
        if(currentPhysicalHealth > physicalHealthMax){
            currentPhysicalHealth = physicalHealthMax;
        };
    };

    Nothing decreaseHealth(Int amount){
        currentPhysicalHealth = currentPhysicalHealth - amount;
        if(currentPhysicalHealth < 0){
            WriteLine("You died");
        };
    };

    Nothing increaseSanity(Int amount){
        currentMentalHealth = currentMentalHealth + amount;
        if(currentMentalHealth > mentalHealthMax){
            currentMentalHealth = mentalHealthMax;
        };
    };

    Nothing decreaseSanity(Int amount){
        currentMentalHealth = currentMentalHealth - amount;
        if(currentMentalHealth < 0){
            WriteLine("You died");
        };
    };

};

class Test is_a Component {
    Test(){
    };

    Nothing print(){
        WriteLine("Hey que onda");
    };

};

class Character is_a Component {
    Character() {
    };

    Nothing a() {
        Int b = 2 + 2;
        return;
    };

    Int b() {
        Int b = 2 * 2;
        return b;
    };

    Text c(Int length) {
        if(length >= 3) {
            return "THREE";
        } else {
            return "MORE THAN THREE";
        };
    };

    Nothing main() {
        Test[5] arr;
        arr[0] = new Test();
        Test a = new Test();
        a = arr[0];
        a.print();
    };
};